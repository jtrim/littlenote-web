// Generated by CoffeeScript 1.3.3
(function() {
  var clearStatus, email, mode, password, sendCredentials, showStatus, statusTimeout;

  mode = "notes";

  email = null;

  password = null;

  statusTimeout = null;

  showStatus = window.showStatus = function(message, persistent) {
    if (persistent == null) {
      persistent = false;
    }
    $('#status').text(message).addClass('visible');
    clearTimeout(statusTimeout);
    if (!persistent) {
      return statusTimeout = setTimeout(function() {
        return $('#status').removeClass('visible');
      }, 3000);
    }
  };

  clearStatus = function() {
    return $('#status').removeClass('visible');
  };

  sendCredentials = window.sendCredentials = function() {
    return $.ajax({
      url: "/" + (mode.split(":")[0]),
      contentType: 'application/json',
      type: "POST",
      data: JSON.stringify({
        email: email,
        password: password
      })
    }).done(function() {
      if (mode.match(/^register/)) {
        return showStatus("Signed up. You are now logged in.");
      } else if (mode.match(/^login/)) {
        return showStatus("Logged in.");
      }
    }).fail(function(jqxhr, textStatus, errorThrown) {
      if (jqxhr.status === 422) {
        return showStatus("Error: " + obj.responseText, true);
      } else {
        return showStatus("Sorry, something went wrong.", true);
      }
    }).always(function() {
      mode = "notes";
      email = null;
      password = null;
      return $('#searchbox').removeAttr('disabled').attr('type', 'text');
    });
  };

  Mousetrap.bind('command+shift+l', function() {
    return $('#searchbox').focus();
  });

  Mousetrap.bind(':', function() {
    return $('#searchbox').text(':').focus();
  });

  Mousetrap.bind('esc', function() {
    return $('<input />').appendTo('body').trigger('focus').css('display', 'none').remove();
  });

  $('#searchbox').on('focus', function(evt) {
    return $('.search-results').show();
  });

  $('#searchbox').on('blur', function(evt) {
    return $('.search-results').hide();
  });

  $('#searchbox').on('keyup', function(evt) {
    var currentValue, el, matchedKeys, range, sel,
      _this = this;
    el = $('#search-results')[0];
    switch (evt.keyCode) {
      case 38:
        el.selectedIndex = Math.max(0, el.selectedIndex - 1);
        this.selectionStart = this.value.length;
        $(el).trigger('change');
        return;
      case 40:
        el.selectedIndex = Math.min(el.children.length - 1, el.selectedIndex + 1);
        this.selectionStart = this.value.length;
        $(el).trigger('change');
        return;
      case 13:
        if (mode.match(/^(?:register|login):email/)) {
          email = this.value;
          showStatus('Enter a password.', true);
          this.type = 'password';
          this.value = "";
          mode = "" + (mode.split(":")[0]) + ":password";
          return;
        } else if (mode.match(/^(?:register|login):password/)) {
          password = this.value;
          showStatus('Logging in...', true);
          this.value = "";
          this.type = "text";
          $(this).attr('disabled', 'disabled');
          sendCredentials();
          return;
        }
        switch (this.value) {
          case ":register":
            showStatus('Enter an email address.', true);
            this.value = "";
            mode = "register:email";
            return;
          case ":login":
          case ":signin":
          case ":log_in":
          case ":sign_in":
            showStatus('Enter an email address.', true);
            this.value = "";
            mode = "login:email";
            return;
        }
        currentValue = _.isEmpty(el.value) ? this.value : el.value;
        $('#editor').attr('data-current-note', currentValue);
        $('#editor').text(notes[currentValue] || '');
        Mousetrap.trigger('esc');
        $('#editor').trigger('focus');
        el = document.getElementById("editor");
        if (el.childNodes.length) {
          range = document.createRange();
          sel = window.getSelection();
          range.setStart(el.childNodes[0], el.innerText.length);
          range.collapse(true);
          sel.removeAllRanges();
          sel.addRange(range);
        }
        return;
    }
    matchedKeys = _.select(_.keys(notes), function(key) {
      return key.match(new RegExp(_this.value));
    });
    $(el).empty();
    return _.each(matchedKeys.sort(), function(key) {
      return $(el).append("<option value='" + key + "'>" + key + "</option>");
    });
  });

  $('#editor').on('keyup', function() {
    notes[$(this).attr('data-current-note')] = this.innerText;
    return localStorage.setItem('littlenotes', JSON.stringify(notes));
  });

}).call(this);
